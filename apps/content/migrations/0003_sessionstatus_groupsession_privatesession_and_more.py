# Generated by Django 5.0.1 on 2025-04-21 14:00

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("booking", "0002_instructorspecialty_groupsession_and_more"),
        ("content", "0002_language_languagelevel_alter_course_options_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SessionStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("code", models.CharField(max_length=20, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "color",
                    models.CharField(
                        default="primary",
                        help_text="CSS color class, e.g. 'primary', 'success'",
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("live", "Live Status"),
                            ("end", "End Status"),
                            ("system", "System Status"),
                        ],
                        default="live",
                        max_length=20,
                    ),
                ),
                ("order", models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                "verbose_name_plural": "Session Statuses",
                "ordering": ["category", "order"],
            },
        ),
        migrations.CreateModel(
            name="GroupSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("duration_minutes", models.PositiveIntegerField(default=60)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("scheduled", "Scheduled"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("no-show", "No Show"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("cancellation_reason", models.TextField(blank=True, null=True)),
                ("completion_notes", models.TextField(blank=True, null=True)),
                ("meeting_link", models.URLField(blank=True, null=True)),
                ("recording_url", models.URLField(blank=True, null=True)),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("max_students", models.PositiveIntegerField(blank=True, null=True)),
                ("min_students", models.PositiveIntegerField(default=2)),
                (
                    "price",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated tags",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "cancellation_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_cancellations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "instructor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_sessions",
                        to="booking.instructor",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_sessions",
                        to="content.language",
                    ),
                ),
                (
                    "level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_sessions",
                        to="content.languagelevel",
                    ),
                ),
                (
                    "students",
                    models.ManyToManyField(
                        blank=True,
                        related_name="group_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "status_detail",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_sessions",
                        to="content.sessionstatus",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PrivateSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("duration_minutes", models.PositiveIntegerField(default=60)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("cancellation_reason", models.TextField(blank=True, null=True)),
                ("completion_notes", models.TextField(blank=True, null=True)),
                ("meeting_link", models.URLField(blank=True, null=True)),
                ("recording_url", models.URLField(blank=True, null=True)),
                ("is_trial", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("scheduled", "Scheduled"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("no-show", "No Show"),
                            ("available", "Available"),
                            ("booked", "Booked"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "cancellation_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_cancellations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "instructor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_sessions",
                        to="booking.instructor",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_sessions",
                        to="content.language",
                    ),
                ),
                (
                    "level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_sessions",
                        to="content.languagelevel",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="private_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "status_detail",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_sessions",
                        to="content.sessionstatus",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SessionFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_type",
                    models.CharField(
                        choices=[
                            ("private", "Private Session"),
                            ("group", "Group Session"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "1 - Poor"),
                            (2, "2 - Below Average"),
                            (3, "3 - Average"),
                            (4, "4 - Good"),
                            (5, "5 - Excellent"),
                        ]
                    ),
                ),
                ("comment", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "teaching_quality",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "1 - Poor"),
                            (2, "2 - Below Average"),
                            (3, "3 - Average"),
                            (4, "4 - Good"),
                            (5, "5 - Excellent"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "technical_quality",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "1 - Poor"),
                            (2, "2 - Below Average"),
                            (3, "3 - Average"),
                            (4, "4 - Good"),
                            (5, "5 - Excellent"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "content_relevance",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "1 - Poor"),
                            (2, "2 - Below Average"),
                            (3, "3 - Average"),
                            (4, "4 - Good"),
                            (5, "5 - Excellent"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "group_session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="content.groupsession",
                    ),
                ),
                (
                    "private_session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="content.privatesession",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="given_session_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SessionReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_type",
                    models.CharField(
                        choices=[
                            ("private", "Private Session"),
                            ("group", "Group Session"),
                        ],
                        max_length=10,
                    ),
                ),
                ("summary", models.TextField()),
                ("topics_covered", models.TextField()),
                (
                    "student_progress",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("satisfactory", "Satisfactory"),
                            ("needs_improvement", "Needs Improvement"),
                            ("poor", "Poor"),
                        ],
                        default="satisfactory",
                        max_length=20,
                    ),
                ),
                ("recommendations", models.TextField(blank=True, null=True)),
                ("materials_used", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("student_strengths", models.TextField(blank=True, null=True)),
                ("student_weaknesses", models.TextField(blank=True, null=True)),
                (
                    "group_session",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="report",
                        to="content.groupsession",
                    ),
                ),
                (
                    "instructor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="session_reports",
                        to="booking.instructor",
                    ),
                ),
                (
                    "private_session",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="report",
                        to="content.privatesession",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SessionAttendance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("attended", models.BooleanField(default=False)),
                ("join_time", models.DateTimeField(blank=True, null=True)),
                ("leave_time", models.DateTimeField(blank=True, null=True)),
                (
                    "attendance_duration",
                    models.PositiveIntegerField(
                        blank=True, help_text="Duration in minutes", null=True
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance",
                        to="content.groupsession",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="session_attendance",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("session", "student")},
            },
        ),
        migrations.AddConstraint(
            model_name="sessionfeedback",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("private_session__isnull", False),
                    ("group_session__isnull", False),
                    _connector="OR",
                ),
                name="feedback_has_session",
            ),
        ),
        migrations.AddConstraint(
            model_name="sessionfeedback",
            constraint=models.UniqueConstraint(
                condition=models.Q(("private_session__isnull", False)),
                fields=("user", "private_session"),
                name="unique_private_session_feedback",
            ),
        ),
        migrations.AddConstraint(
            model_name="sessionfeedback",
            constraint=models.UniqueConstraint(
                condition=models.Q(("group_session__isnull", False)),
                fields=("user", "group_session"),
                name="unique_group_session_feedback",
            ),
        ),
        migrations.AddConstraint(
            model_name="sessionreport",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("private_session__isnull", False),
                    ("group_session__isnull", False),
                    _connector="OR",
                ),
                name="report_has_session",
            ),
        ),
    ]
